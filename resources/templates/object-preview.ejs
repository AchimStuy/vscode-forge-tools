<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="https://developer.api.autodesk.com/modelderivative/v2/viewers/6.*/style.min.css" type="text/css">
    <title>Object: <%= object.objectKey %></title>
</head>
<body>
    <h1>Object: <%= object.objectKey %></h1>
    <table>
        <tr>
            <td>Object ID</td>
            <td><%= object.objectId %></td>
        </tr>
        <tr>
            <td>Object Key</td>
            <td><%= object.objectKey %></td>
        </tr>
        <tr>
            <td>Bucket Key</td>
            <td><%= object.bucketKey %></td>
        </tr>
        <tr>
            <td>Size</td>
            <td><%= object.size %></td>
        </tr>
        <tr>
            <td>SHA1</td>
            <td><%= object.sha1 %></td>
        </tr>
        <tr>
            <td>Location</td>
            <td><%= object.location %></td>
        </tr>
    </table>
    <br>
    <div id="viewer"></div>
    <div id="logs"></div>
    <script src="https://developer.api.autodesk.com/modelderivative/v2/viewers/6.*/viewer3D.min.js"></script>
    <script>
        const vscode = acquireVsCodeApi();
        const urn = btoa('<%= object.objectId %>').replace(/=/g, '');
        const documentId = 'urn:' + urn;

        function showTranslationButton() {
            document.getElementById('viewer').innerHTML = `
                Document does not seem to be translated yet.
                <button id="translate">Translate</button>
            `;
            document.getElementById('translate').addEventListener('click', async function() {
                document.getElementById('viewer').innerText = 'Translating';
                vscode.postMessage({
                    command: 'translate',
                    urn: urn
                });

                window.addEventListener('message', event => {
                    const message = event.data; // The JSON data our extension sent
                    switch (message.command) {
                        case 'progress':
                            document.getElementById('viewer').innerText = `Translating (${message.progress})`;
                            break;
                        case 'reload':
                            viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);
                            break;
                    }
                });
            });
        }

        let viewerApp;
        const options = {
            env: 'AutodeskProduction',
            accessToken: '<%= token.access_token %>'
        };

        Autodesk.Viewing.Initializer(options, function() {
            viewerApp = new Autodesk.Viewing.ViewingApplication('viewer');
            viewerApp.registerViewer(viewerApp.k3D, Autodesk.Viewing.Private.GuiViewer3D);
            viewerApp.loadDocument(documentId, onDocumentLoadSuccess, onDocumentLoadFailure);
        });

        function onDocumentLoadSuccess(doc) {
            const viewables = viewerApp.bubble.search({ 'type': 'geometry' });
              if (viewables.length > 0) {
                viewerApp.selectItem(viewables[0].data, onItemLoadSuccess, onItemLoadFail);
            } else {
                showTranslationButton();
            }
        }

        function onDocumentLoadFailure(viewerErrorCode) {
            //document.getElementById('logs').innerText = 'onDocumentLoadFailure() - errorCode:' + viewerErrorCode;
            showTranslationButton();
        }

        function onItemLoadSuccess(viewer, item) {
              // item loaded, any custom action?
        }

        function onItemLoadFail(errorCode) {
            //document.getElementById('logs').innerText = 'onItemLoadFail() - errorCode:' + viewerErrorCode;
        }
    </script>
</body>
</html>